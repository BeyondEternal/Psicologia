@page "/login"
@using System.Net
@using Psicología.Client.Authentication;
@using Psicología.Shared.Model;
@inject HttpClient httpClient
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<div class="container">
    <center>
        <div class="card">
            <a class="login">Log in</a>
            <div class="inputBox">
                <input @bind="loginRequest.UserName" type="text" required="required">
                <span class="user">Username</span>
            </div>

            <div class="inputBox">
                <input @bind="loginRequest.Password" @ref="textInput" @onkeydown="HandleKeyDown" type="password" required="required">
                <span>Password</span>
            </div>

            <button @onclick="Authenticate" class="enter">Enter</button>

        </div>
    </center>
</div>

@code {
    private LoginRequest loginRequest = new LoginRequest();
    private ElementReference textInput;

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Authenticate();
        }
    }

    private async Task Authenticate()
    {
        var loginResponse = await httpClient.PostAsJsonAsync<LoginRequest>("/api/Account/Login", loginRequest);

        if (loginResponse.IsSuccessStatusCode)
        {
            var userSession = await loginResponse.Content.ReadFromJsonAsync<UserSession>();
            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(userSession);
            navManager.NavigateTo("/", true);
        }
        else if (loginResponse.StatusCode == HttpStatusCode.Unauthorized)
        {
            await js.InvokeVoidAsync("alert", "Invalid User Name or Password");
            return;
        }
    }
}